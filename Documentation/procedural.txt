What is pip ??? Why do we need it ??
PIP stands for Package Installer for Python.
It is tool to install and manage additional package which are not provided by python standard ditribution.
In short it is python package manager.
Simply, it is needed to manage additonal package.

Before python version 3.4 we needed to install PIP separately but after the 3.4 version PIP have been given in python installer package.


What is PYPi ?? (Python package Index)
PYPI is a online repository where all the package for python are hosted which are further downloaded using pip .

#Important Command
Pip Freeze
pip install -r requirements.txt
pip list

What is pythonpath?
PYTHONPATH is an environment variable used by Python to determine which directories to search for modules and packages. 
When you import a module in your Python script, Python looks in the directories listed in PYTHONPATH for the module.
You can make your own python path add it to python path and make your module and access it from anywhere.

Immutable Vs Mutable:
If the value of the object can change, then the  object is called mutable, 
while if the value cannot be changed, then the  object is called immutable. 

#Enumerate
Give us counter and value in certain iterable obj.
for reverse iteration do : rev = len(list)-index-1

#Shallow Copy VS Deep Copy 
ShallowShallow Copy stores the references of objects to the original memory address.No copy of nested list is done 
Deep copy stores copies of the object's value.And The change in cipy doesnt affect the original copy and vice versa

Why do we need Venv??
To avoid version conflict. We may have two application where both use same packages but of different version . In this 
case venv help us to create a isolated environment to avoid conflicts.

List Comprehension: List comprehensions in Python provide a concise way to create lists. 
They offer a more readable and expressive means of generating lists compared to using traditional loops and append() methods.
Example:
 1. Simple List Comprehension:-
                        squares = [x**2 for x in range(10)]
                        print(squares)
2. List Comprehension with a Condition
                        evens = [x for x in range(10) if x % 2 == 0]
                        print(evens)

3. Applying a Function in List Comprehension
                        words = ['hello', 'world', 'python']
                        uppercase_words = [word.upper() for word in words]
                        print(uppercase_words)

4.If else condition
l=[1,2,3,4,5]
result=[expression if condition else condition for var in iterable]

#Funstion : Are the reusable block of code.
There two types are function that are provided by python. 
Built in Function: Are the function provided by python.
User Defined function: Are the function defined by user according to the user requirements .It is efined using keyword def.

Local variable vs global variable:
Local variable are defined when a function method or block of scope is created.The variable gets created when enters the code and gets destroyed after the block ends
Where as the global are defined at the top level and are The variable can used through out the program 

Arguements vs Paramters
These are defined in the function signature.
 Eg def func(name) #This is parameter 
These are the actual values you provide when you call the function.
Eg func("Rabin") #This is arguements

#Namespace 
A namespace is a system that ensures each name (like variables, functions, classes, etc.) 
is unique and can be used without conflict. 
Types of Namespaces:
Built-in Namespace: Contains names of all built-in objects in Python, like print(), id(), etc.
Global Namespace: Contains names defined at the top level of a script or module.The variable last till the program execution
Local Namespace: Contains names defined inside a function or method.Only last inside the scope.

List:
A list is an ordered, mutable collection of items. 
Lists can contain elements of different data types, including other lists.
Characterstics of lists:
1 ordered
2 Mutable
3 Indexed

### List Methods and Their Functions
1. **`append(item)`**
   - Adds an item to the end of the list.

2. **`extend(iterable)`**
   - Adds all elements from an iterable to the end of the list.

3. **`insert(index, item)`**
   - Inserts an item at the specified index in the list.

4. **`remove(item)`**
   - Removes the first occurrence of the specified item from the list.

5. **`pop([index])`**
   - Removes and returns the item at the specified index (last item if no index is provided).

6. **`clear()`**
   - Removes all items from the list, leaving it empty.

7. **`index(item, start=0, end=len(list))`**
   - Returns the index of the first occurrence of the specified item.

8. **`count(item)`**
   - Returns the number of occurrences of the specified item in the list.

9. **`sort(key=None, reverse=False)`**
   - Sorts the items of the list in ascending or descending order.

10. **`reverse()`**
    - Reverses the order of items in the list.

11. **`copy()`**
    - Returns a shallow copy of the list.

Tuple
Dictionary
Sets
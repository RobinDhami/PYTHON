
### PIP (Package Installer for Python)
**Definition**: PIP stands for Package Installer for Python. It is a tool to install and manage additional packages that are not included in the standard Python distribution. In short, it is Pythonâ€™s package manager.

**Importance**:
- Manages external packages efficiently.
- Before Python version 3.4, PIP needed to be installed separately; from version 3.4 onwards, it is included with the Python installer.

### PyPI (Python Package Index)
**Definition**: PyPI is an online repository where Python packages are hosted and can be downloaded using PIP.

### Important PIP Commands
- **`pip freeze`**: Lists installed packages and their versions.
- **`pip install -r requirements.txt`**: Installs packages listed in a requirements file.
- **`pip list`**: Displays all installed packages.

### PYTHONPATH
**Definition**: PYTHONPATH is an environment variable that Python uses to determine which directories to search for modules and packages.
 You can add your own directories to PYTHONPATH to make your modules accessible from anywhere.

### Mutable vs Immutable
- **Mutable**: Objects whose value can change (e.g., lists, dictionaries).
- **Immutable**: Objects whose value cannot change (e.g., tuples, strings).

### Enumerate
- **Definition**: Provides a counter and value for each item in an iterable.
- **Reverse Iteration**: Use `rev = len(list) - index - 1`.

### Shallow Copy vs Deep Copy
- **Shallow Copy**: Stores references to objects; does not create copies of nested objects.
- **Deep Copy**: Creates copies of the object's value; changes in the copy do not affect the original.

### Why Use `venv`?
- **Purpose**: To avoid version conflicts between applications that require different versions of the same package. `venv` allows you to create isolated environments for different projects.

### List Comprehension
**Definition**: A concise way to create lists, providing a more readable means than traditional loops.

**Examples**:
1. **Simple List Comprehension**:
   ```python
   squares = [x**2 for x in range(10)]
   ```
2. **List Comprehension with Condition**:
   ```python
   evens = [x for x in range(10) if x % 2 == 0]
   ```
3. **Applying a Function**:
   ```python
   uppercase_words = [word.upper() for word in ['hello', 'world', 'python']]
   ```
4. **If-Else Condition**:
   ```python
   result = [expression if condition else alternative for var in iterable]
   ```

### Functions
**Definition**: Functions are reusable blocks of code.

**Types**:
- **Built-in Functions**: Provided by Python.
- **User-Defined Functions**: Defined by users using the `def` keyword.

### Local vs Global Variables
- **Local Variables**: Defined within a function; exist only within that scope.
- **Global Variables**: Defined at the top level; accessible throughout the program.

### Arguments vs Parameters
- **Parameters**: Variables defined in a function signature (e.g., `def func(name)`).
- **Arguments**: Actual values passed to a function when called (e.g., `func("Rabin")`).

### Namespace
**Definition**: A system that ensures each name (like variables, functions, classes, etc.) is unique and can be used without conflict.

**Types**:
- **Built-in Namespace**: Contains names of built-in objects (e.g., `print()`, `id()`).
- **Global Namespace**: Contains names defined at the top level of a script or module.
- **Local Namespace**: Contains names defined inside a function or method.

### Data Structures

#### List
**Definition**: An ordered, mutable collection of items that can contain elements of different data types, including other lists.

**Characteristics**:
1. Ordered
2. Mutable
3. Indexed

#### List Methods and Their Functions
1. **`append(item)`**: Adds an item to the end of the list.
2. **`extend(iterable)`**: Adds all elements from an iterable to the end of the list.
3. **`insert(index, item)`**: Inserts an item at the specified index.
4. **`remove(item)`**: Removes the first occurrence of the specified item.
5. **`pop([index])`**: Removes and returns the item at the specified index.
6. **`clear()`**: Removes all items from the list.
7. **`index(item, start=0, end=len(list))`**: Returns the index of the first occurrence of the specified item.
8. **`count(item)`**: Returns the number of occurrences of the specified item.
9. **`sort(key=None, reverse=False)`**: Sorts the items in ascending or descending order.
10. **`reverse()`**: Reverses the order of items in the list.
11. **`copy()`**: Returns a shallow copy of the list.

#### Tuple
**Definition**: An ordered, immutable collection of items. Once created, the items cannot be changed, added, or removed.
Since Tuple are immutable they have less method 
1.count(x): Returns the number of occurrences of item x in the tuple.
2.index(x[, start[, end]]): Returns the index of the first occurrence of item x (raises ValueError if not found).

**Characteristics**:
1. Ordered
2. Immutable
3. Indexed

#### Dictionary
**Definition**: An unordered collection of key-value pairs, where each key must be unique.

**Characteristics**:
1. Unordered
2. Mutable
3. Key-Value pairs

#### Set
**Definition**: An unordered collection of unique items.

**Characteristics**:
1. Unordered
2. Mutable
3. Unique items

1.add(elem): Adds an element to the set.
2.update(iterable): Adds all elements from an iterable to the set.
3.remove(elem): Removes the specified element; raises KeyError if not found.
4.discard(elem): Removes the specified element if it exists; no error if not found.
5.pop(): Removes and returns an arbitrary element; raises KeyError if the set is empty.
6.clear(): Removes all elements from the set.
7.copy(): Returns a shallow copy of the set.
8.union(other_set): Returns a new set with elements from both sets.
9.intersection(other_set): Returns a new set with elements common to both sets.
10.difference(other_set): Returns a new set with elements in the original set that are not in other_set.
11.symmetric_difference(other_set): Returns a new set with elements in either set but not in both.


####. **List vs Tuple vs Set vs Dictionary: Quick Comparison**
| Feature       | List              | Tuple             | Set              | Dictionary        |
|---------------|-------------------|-------------------|-------------------|-------------------|
| Ordered       | Yes               | Yes               | No                | No                |
| Mutable       | Yes               | No                | Yes               | Yes               |
| Duplicates    | Yes               | Yes               | No                | Keys are unique   |
| Syntax        | `[ ]`             | `( )`             | `{ }`             | `{key: value}`    |


Difference between append and extend 
Append adds a single item at the end where as extends adds multiple elements at end.

List vs Tuple 
List are mutable and tuple are not we can use list where we want to add or delete item in the future and tuple where we want fix ordere items without changes.
List have many methos as it is mutable where as tuple have less method due to its immutability.

A lambda function is a small anonymous function defined using the lambda keyword. 
It can take any number of arguments but can only have one expression. 
Lambda functions are often used for short, throwaway functions,
 especially when you need a simple function for a short period.
Syntax:
          lambda arguments: expression

 #Higher Order Function:
Higher order function are function which take function as an arguements.